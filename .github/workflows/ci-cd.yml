name: CI/CD Pipeline

on:
  push:
    branches: [main]

permissions:
  id-token: write
  contents: read

jobs:
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "24"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint

      - name: Run tests
        run: npm run test

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: lint-and-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "24"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: pdp/task-1
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG -f docker/Dockerfile .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

      - name: Trigger deployment via Lambda webhook
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: pdp/task-1
          IMAGE_TAG: ${{ github.sha }}
          LAMBDA_URL: ${{ secrets.LAMBDA_DEPLOYMENT_URL }}
        run: |
          echo "Triggering deployment for image: $REGISTRY/$REPOSITORY:$IMAGE_TAG"

          # Send webhook to Lambda URL
          curl -X POST "$LAMBDA_URL" \
            -H "Content-Type: application/json" \
            -H "User-Agent: GitHub-Actions-CI/CD" \
            -d "{
              \"ecrRegistry\": \"$REGISTRY\",
              \"imageName\": \"$REPOSITORY\",
              \"imageTag\": \"$IMAGE_TAG\"
            }" \
            --fail \
            --show-error \
            --silent \
            --write-out "HTTP Status: %{http_code}\nResponse Time: %{time_total}s\n"

          if [ $? -eq 0 ]; then
            echo "✅ Deployment webhook sent successfully"
          else
            echo "❌ Failed to send deployment webhook"
            exit 1
          fi
